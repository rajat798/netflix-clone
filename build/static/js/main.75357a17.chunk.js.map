{"version":3,"sources":["Row.js","requests.js","Banner.js","Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["Row","title","fetchURL","isLarge","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","axios","get","request","console","log","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanticMovies","fetchDocumentaries","Banner","str","n","setmovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Navbar","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75357a17.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\n// import instance from './axios'\r\nimport './Row.css'\r\nimport YouTube from 'react-youtube'\r\nimport movieTrailer from 'movie-trailer'\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original\"\r\n\r\nfunction Row({ title, fetchURL, isLarge }) {\r\n    // console.log(instance)\r\n\r\n    const [movies, setMovies] = useState([])\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(`https://api.themoviedb.org/3${fetchURL}`)\r\n            console.log(request.data.results)\r\n            setMovies(request.data.results)\r\n            return request;\r\n        }\r\n        fetchData()\r\n    }, [fetchURL]) // if [], run once when the row loads, and dont run it again, if [movies], run everytime movies changes\r\n\r\n    const opts = {\r\n        height: '390',\r\n        width: '100%',\r\n        playerVars: {\r\n            // https://developers.google.com/youtube/player_parameters\r\n            autoplay: 1,\r\n        },\r\n    }\r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl(\"\")\r\n        } else {\r\n            movieTrailer(movie?.name || \"\")\r\n                .then((url) => {\r\n                    const urlParams = new URLSearchParams(new URL(url).search);\r\n                    setTrailerUrl(urlParams.get('v'))\r\n                })\r\n                .catch(error => console.log(error))\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='row'>\r\n            {/*title*/}\r\n            <h2>{title}</h2>\r\n            <div className='row_posters'>\r\n                {/*several row posters*/}\r\n                {movies.map(movie => (\r\n                    <img\r\n                        key={movie.id}\r\n                        onClick={() => handleClick(movie)}\r\n                        className={`row_poster ${isLarge && \"row_posterLarge\"}`}\r\n                        src={`${base_url}${isLarge ? movie.poster_path : movie.backdrop_path}`}\r\n                        alt={movie.name}\r\n                    />\r\n                ))}\r\n            </div>\r\n            {/*container -> poster*/}\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","const API_KEY = \"2f34a002c461333165d56e75ded85032\"\r\n\r\nconst requests = {\r\n    fetchTrending:`/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated:`/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies:`/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies:`/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies:`/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanticMovies:`/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries:`/discover/movie?api_key=${API_KEY}&with_genres=99`\r\n}\r\n\r\n\r\nexport default requests;","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport requests from './requests'\r\nimport './Banner.css'\r\n\r\nfunction Banner() {\r\n    const [movie, setmovie] = useState([])\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(`https://api.themoviedb.org/3${requests.fetchNetflixOriginals}`)\r\n            // console.log(request.data.results[Math.floor(Math.random() * request.data.results.length-1)])\r\n            setmovie(request.data.results[Math.floor(Math.random() * request.data.results.length - 1)])\r\n            return request;\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    console.log(movie)\r\n\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str\r\n    }\r\n\r\n    return (\r\n        <header\r\n            className='banner'\r\n            style={{\r\n                backgroundSize: 'cover',\r\n                backgroundImage: `url(\r\n                    \"https://image.tmdb.org/t/p/original${movie?.backdrop_path}\"\r\n                    )`,\r\n                backgroundPosition: 'center center',\r\n            }}\r\n        >\r\n            <div className=\"banner_contents\">\r\n                {/* title */}\r\n                <h1 className='banner_title'>\r\n                    {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n                <div className=\"banner_buttons\">\r\n                    <button className=\"banner_button\">\r\n                        Play\r\n                    </button>\r\n                    <button className=\"banner_button\">\r\n                        My List\r\n                    </button>\r\n                </div>\r\n                <h1 className=\"banner_description\">\r\n                    {truncate(movie?.overview, 150)}\r\n                </h1>\r\n            </div>\r\n\r\n            {/* div with 2 buttons*/}\r\n            {/* description*/}\r\n\r\n            <div className='banner--fadeBottom' />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useEffect, useState } from 'react'\r\nimport './Navbar.css'\r\n\r\nfunction Navbar() {\r\n\r\n    const [show, handleShow] = useState(false)\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () =>{\r\n            if(window.scrollY > 100){\r\n                handleShow(true)\r\n            }else handleShow(false)\r\n        })\r\n        return () => {\r\n            window.removeEventListener(\"scroll\")\r\n        }\r\n    },[])    \r\n    return (\r\n        <div className={`nav ${show && \"nav_black\"}`}>\r\n            <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\" alt=\"Netflix Logo\" className=\"nav__logo\" />\r\n            <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" alt=\"Netflix Avatar\" className=\"nav__avatar\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import './App.css';\nimport Row from './Row'\nimport requests from './requests';\nimport Banner from './Banner'\nimport Navbar from './Navbar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/*<h1>Hello</h1>*/}\n      {/* Navbar */}\n      <Navbar />\n      <Banner />\n      <Row title=\"NETFLIX ORIGINALS\" fetchURL={requests.fetchNetflixOriginals} isLarge/>\n      <Row title=\"Trending Now\" fetchURL={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchURL={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchURL={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchURL={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchURL={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchURL={requests.fetchRomanticMovies} />\n      <Row title=\"Documentaries\" fetchURL={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}